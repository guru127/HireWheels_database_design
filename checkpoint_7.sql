----------
-- PART A--
----------

/**
TODO 1: Create a table named ‘bill’ to store the data of the final bill received by 
the customer.
**/
USE HireWheels;
drop table bill;

CREATE TABLE bill
(
  Booking_id   CHAR(10) PRIMARY KEY,
  Vehical_id   CHAR(10) NOT NULL,
  User_id     CHAR(10) NOT NULL,
  Bill_date   DATE     NOT NULL,
  Discount    NUMERIC(8,2) default 0,
  Tax_amount  NUMERIC(8,2),
  Total_amount  NUMERIC(8,2),
  Message       VARCHAR(50) NOT NULL 
   );
DESC BILL;
ALTER TABLE bill 
MODIFY  booking_id int;
 
ALTER TABLE bill 
MODIFY  vehical_id int;

ALTER TABLE bill 
MODIFY  user_id int;
desc bill;
desc vehical;

ALTER TABLE bill
ADD constraint fk_bill_vehical foreign key (vehical_id) references vehical(vehical_id);


/**
TODO 2: Write a procedure named ‘add_bill_data’ to populate the ‘bill’ table with 
data as follows:

The procedure should accept booking_id as an input.
In case the user is an ‘Admin’, the bill should be marked as ‘Invalid Bill’.
**/
DELIMITER $$
CREATE PROCEDURE add_bill_data (booking_id int)
BEGIN
-- valiable for checking user-role and booking count of user 
DECLARE role_name VARCHAR(50);
DECLARE messege VARCHAR(50);
DECLARE count int;
DECLARE discout NUMERIC(8,2) ;

-- selecting user role of user and checking role of usser and updating messege acordigly
SELECT r.role_name INTO role_name FROM booking b
 INNER JOIN user u ON u.user_id=b.user_id
 INNER JOIN user_role r ON u.user_type_id = r.role_id WHERE b.bookin_id = booking_id;
 IF role_name = 'Admin' THEN SET messege = 'Invalid Bill'; 
  ELSE SET messege = 'Valid Bill';
  END IF;   
  
-- seelcting booking count of the user to check for discount
  set count = (SELECT count(booking_id) FROM booking 
    where user_id= (SELECT User_id FROM booking WHERE bookin_id = booking_id));
IF count > 10 
   THEN SET discount =(SELECT  amount from booking where bookin_id = booking_id)*0.2;
  ELSE SET discount=0 ;
END IF;
INSERT INTO bill VALUES( 
booking_id, 
(SELECT vehical_id FROM booking WHERE bookin_id = booking_id),
(SELECT User_id FROM booking WHERE bookin_id = booking_id),
(SELECT Actual_drop_off_date  FROM booking WHERE bookin_id = booking_id),
 discount,
(SELECT  amount from booking where bookin_id = booking_id)* 0.1,
(SELECT amount  from booking where bookin_id = booking_id) 
+ (SELECT  amount from booking where bookin_id = booking_id)* 0.1 - discount,
messege
);
END $$
DELIMITER ;

/**
TODO 3: Use add_bill_data stored procedure to add the bill data for some booking id,
and check the data in the bill table.
**/
CALL add_bill_data(2);
SELECT * FROM bill;
-- --------
-- PART B--
-- --------
/**
TODO 1: Write a stored procedure named ‘revenue_report’ that generates a revenue 
report for your boss, showcasing the revenue generated by vehicles to date based on their 
city. The report should be arranged in descending order of the revenue and would look 
something like this:

‘{CITY_NAME} : {REVENUE}’
At the end line of the report, also print: ‘Total Revenue: {TOTAL_REVENUE}’. 
The report should include all the cities available in the database, and if 
they have not generated any revenue, show the revenue as 0.
**/
DELIMITER $$
CREATE PROCEDURE revenue_report()
BEGIN
SELECT c.city_name AS 'CITY_NAME:', sum(b.amount) AS 'REVENUE' FROM booking b 
INNER JOIN location l ON  l.location_id= b.location_id
INNER JOIN city c ON c.city_id=l.city_id
GROUP BY city_name
UNION
SELECT 'Total Revenue :' ,sum(amount) AS 'TOTAL_REVENUE' FROM booking;
END$$
DELIMITER ;
-- calling revenue report procedure
CALL  revenue_report();

----------
-- PART C--
----------
/**
TODO 1: Sometimes, customers might return their car later than the expected return 
date. In order to include this in the database, add the following column to the booking 
table:
     1. Actual drop-off date: This represents the actual date on which the customer 
returned the vehicle. It should store the DATE of the actual drop off. The default value 
for this should be NULL, and once the user returns the vehicle, it should be updated with
the return date. 
**/
ALTER TABLE booking
add column Actual_drop_off_date date default null;

/**
TODO 2: Write a trigger ‘generate_bill_trigger’ that is invoked when an update statement 
is called on the booking table to update the actual drop-off date. This trigger should
generate a bill, i.e., it should insert data into the bill table based on the updated
return date.
**/
CREATE TRIGGER generate_bill_trigger 
    AFTER UPDATE ON booking
    FOR EACH ROW 
    call add_bill_data(bookin_id);
/**
TODO 3: Update an entry in the booking table for any booking id with the actual drop-off
date as 21-06-20.
**/
desc booking;
 
UPDATE  booking SET Actual_drop_off_date= '2020-06-26' WHERE bookin_id=12;
 
/**10:36:26	update booking set Actual_drop_off_date= '2020-06-26'   
  where bookin_id=12	Error Code: 1054. Unknown column 'bookin_id' in 'field list'	0.000 sec

TODO 4: Show the bill table to ensure that the bill was generated for the booking ID used in
TODO 3.
**/
SELECT * FROM bill;
